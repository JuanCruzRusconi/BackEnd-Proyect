components:
  schemas:
    Cart:
      type: object
      properties:
        products:
          type: array
          description: Productos dentro del carrito
          products:
            $ref: '#/components/schemas/CartItem'
      example: 
        products:
          product0: 64dc35e9b1a6f4bbfbf63db5
          product1: 64dc35e9b1a6f4bbfbf63db7
    CartItem:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          description: ID del producto dentro del carrito
        quantity:
          type: integer
          format: int32
          description: Cantidad del producto dentro del carrito
      example: 
        products:
          product: 64dc35e9b1a6f4bbfbf63db5
          quantity: 2
    NewCart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NewCartItem'
      example: 
        products:
          product: 64dc35e9b1a6f4bbfbf63db5
          quantity: 3
    NewCartItem:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
      example: 
        products:
          product: 64dc35e9b1a6f4bbfbf63db5
          quantity: 4
    UpdateCart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UpdateCartItem'
      example: 
        products:
          product: 64dc35e9b1a6f4bbfbf63db8
          quantity: 5
    UpdateCartItem:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
      example: 
        products:
          product: 64dc35e9b1a6f4bbfbf63db8
          quantity: 5
  responses:
    getCarts:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        payload:
          $ref: '#/components/schemas/Cart'
      example:
        status: success
        payload:
          id: ID del carrito
          user: ID del propietario del carrito
          products:
            - product_id: ID del producto añadido
              quantity: Cantidad del producto añadido
    createCart:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        payload:
          $ref: "#/components/schemas/Cart"
      example:
        status: success
        payload:
          id: ID del nuevo carrito
          products:
            - product_id: ID de un producto añadido
              quantity: Cantidad del producto añadido
    updateCart:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        payload:
          $ref: '#/components/schemas/Cart'
      example:
        status: success
        payload:
          id: ID del carrito actualizado
          products:
            - product_id: ID de los productos del carrito actualizado
              quantity: Cantidad de los productos del carrito
    destroyCart:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        message:
          type: string
          description: Mensaje de éxito
      example:
        status: success
        message: Carrito eliminado exitosamente
    notFound:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        from:
          type: string
          description: Descripción del endpoint del error
        message:
          type: string
          description: Descripción del error
      example:
        status: error
        from: GET /api/carts controller
        message: Not found documents
    notFoundOne:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        from:
          type: string
          description: Descripción del endpoint del error
        message:
          type: string
          description: Descripción del error
      example:
        status: error
        from: GET /api/carts/{pid} controller
        message: Not found document
    documentError:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        from:
          type: string
          description: Descripción del endpoint del error
        message:
          type: string
          description: Descripción del error
      example:
        status: error
        from: POST /api/carts controller
        message: Cannot create document
    clientError:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        from:
          type: string
          description: Descripción del endpoint del error
        message:
          type: string
          description: Descripción del error
      example:
        status: error
        from: PUT /api/carts controller
        message: Incomplete values
    serverError:
      type: object
      properties:
        status:
          type: string
          description: Estado de la solicitud
        from:
          type: string
          description: Descripción del endpoint del error
        message:
          type: string
          description: Descripción del error
      example:
        status: fatal
        from: HTTP /api/carts controller
        message: Server crashes

paths:
  /api/carts:
    get:
      summary: Obtener la lista completa de carritos
      tags:
        - Carts
      responses:
        '200':
          description: Exito en la lectura de carritos
          content:
            application/json:
              schema:
                $ref: '#/components/responses/getCarts'
        '404':
          description: No se encontraron los documentos
          content:
            application/json:
              schema:
                $ref: '#/components/responses/notFound'
        '500':
          description: Error caida de servidor
          content:
            application/json:
              schema:
                $ref: '#components/responses/serverError'
    post:
      summary: Crear un nuevo carrito
      tags:
        - Carts
      requestBody:
        required: true
        description: Objeto con las propiedades necesarias para crear un nuevo carrito
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCart'
      responses:
        '201':
          description: Éxito en la creación de un nuevo carrito
          content:
            application/json:
              schema:
                $ref: '#/components/responses/createCart'
        '400':
          description: Faltante de campos en el objeto de creación de carrito
          content:
            application/json:
              schema:
                $ref: '#/components/responses/documentError'
        '500':
          description: Error caida de servidor
          content:
            application/json:
              schema:
                $ref: '#components/responses/serverError'

  /api/carts/{cid}:
    get:
      summary: Obtener información de un carrito específico
      tags:
        - Carts
      parameters:
        - name: cid
          in: path
          description: ID del carrito
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Exito en la lectura del carrito
          content:
            application/json:
              schema:
                $ref: '#/components/responses/getCarts'
        '404':
          description: Carrito no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/responses/notFoundOne'
        '500':
          description: Error caida de servidor
          content:
            application/json:
              schema:
                $ref: '#components/responses/serverError'
    put:
      summary: Actualizar información de un carrito específico
      tags:
        - Carts
      parameters:
        - name: cid
          in: path
          description: ID del carrito
          required: true
          type: integer
          format: int64
      requestBody:
        required: true
        description: Objeto con las propiedades a actualizar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCart'
      responses:
        '200':
          description: Éxito en la actualización del carrito
          content:
            application/json:
              schema:
                $ref: '#/components/responses/updateCart'
        '400':
          description: Se requieren los campos a actualizar
          content:
            application/json:
              schema:
                $ref: '#/components/responses/clientError'
        '500':
          description: Error caida de servidor
          content:
            application/json:
              schema:
                $ref: '#components/responses/serverError'
    delete:
      summary: Eliminar un carrito específico
      tags:
        - Carts
      parameters:
        - name: cid
          in: path
          description: ID del carrito
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Éxito en la eliminación del carrito
          content:
            application/json:
              schema:
                $ref: '#/components/responses/destroyCart'
        '404':
          description: Carrito no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/responses/notFoundOne'
        '500':
          description: Error caida de servidor
          content:
            application/json:
              schema:
                $ref: '#components/responses/serverError'